--[[---------------------------------------------------------------
This program will allow you to create a tree farm to any dimension.
The turle will create the farm forward (direction the turtle is 
facing), and to the left of it's current postion when starting the
program. If it's a new farm, the turtle will first created a borader
around the farm. If it's an existing farm, the turtle will go into 
a 'processing' mode and skip the boarder. Uses an ender chest to 
deposte drops. To be used with a **mining** turtle, or your ender
chest will be destroyed.

https://github.com/CaptonTypo
]]-----------------------------------------------------------------

--[[Configure slot veriables]]-------------------------------------
local treeSpacing = 1 --Number of blocks between trees.
local fuelSlot = 16 --MUST use logs of same wood type.
local saplings = 15
local chest = 14 
local borderMaterial = 13 --Recommend not using same wood type.
local debug = false --Enables print message to help with debugging.
local enderChest = true --True, if using an ender chest.
-------------------------------------------------------------------

term.clear()
term.setCursorPos(1,1)
print ("--------------------------------------")
print ("|            CT-TreeFarm             |")
print ("|                v1                  |")
print ("|          by: CaptonTypo            |")
print ("--------------------------------------")
print (" ")
print ("Is this a new farm?(yes/no): ")
local isNew = read()

--How many rows of trees in the direction the turtle is currently facing.
print ("Length of farm? (Direction turtle's facing)")
local rowLength = tonumber(read())

--How many rows of trees to the left of the turtles current location.
print ("Width of farm? (To the left of the turtle)")
local rowWidth = tonumber(read())

--Set veriable 'name' to computer's label.
local name = os.getComputerLabel()

--If a wireless turtle, opens modem and turns on rednet broadcasts.
function openModem()
	if peripheral.getType("right") == "modem" then
		rednet.open("right")
		print ("Modem present and activated.")
		wifi = true
	else
		print ("No modem present.")
		wifi = false
	end
end

--Checks turtle's fuel level and refuels if need. Will display message on screen and broadcast to rednet of status.
function checkFuel()
	print ("Checking fuel.")
	while turtle.getFuelLevel() <= 100 do
		if turtle.getItemCount(fuelSlot) > 1 then
			turtle.select(fuelSlot)
			turtle.refuel(1)
			else
			print ("Error: Out of fuel!")
			if wifi == true then
				rednet.broadcast("Error("..name.."): Out of fuel!")
			end
			sleep(5)
		end
		sleep(0.1)
	end
end

--Refuels if needed than moves forward breaking blocks that are in the way.
function moveFwd()
	checkFuel()
	if turtle.forward() == false then
		repeat
			turtle.dig()
			sleep(0.3)
		until turtle.forward() == true		
	end
end

--Cuts down tree
function removeTree()
	while turtle.detectUp() == true do
		repeat
			print ("removeTree - up")
			turtle.digUp()
			turtle.up()
		until turtle.detectUp() == false
		while turtle.detectDown() == false do
			repeat
				print ("removeTree - down")
				turtle.down()
			until turtle.detectDown() == true
			print ("removetree - dig down")
			turtle.digDown()
			plant()
		end
	end
end

--Plants a sapling. Will display on screen and broadcast to rednet if turtle is out of spalings.
function plant()
	print("Planting sapling.")
	turtle.select(saplings)
	if turtle.getItemCount(saplings) > 1 then
		if turtle.detectDown() == false then
			turtle.placeDown()
		else
			print("There is something already there.")
		end
	else
		while turtle.getItemCount(saplings) <= 1 do
			repeat
			print ("Error: Out of saplings!")
			if wifi == true then
				rednet.broadcast("Error("..name.."): Out of saplings!")
			end
			sleep(5)
			until turtle.getItemCount(saplings) > 1
		end
	end
end

--Picks up any items on the ground.
function pickUp()
	turtle.select(saplings)
	turtle.suckDown()
end

--Builds 'length' side of border.
function borderLength()
	print ("Placing border side length.")
	if rowLength % 2 == 0 then
		postCount = 0
	else
		postCount = 1
	end
	while postCount < rowLength do
		repeat
			if turtle.getItemCount(borderMaterial) >= 1 then
				print ("Placing post: "..postCount)
				moveFwd()
				turtle.select(borderMaterial)
				turtle.placeDown()
				postCount = postCount + 1			
			else
				print ("Error: Out of border supplies!")
				if wifi == true then
					rednet.broadcast("Error("..name.."): Out of border supplies!")
				end
				sleep(5)
			end
		until postCount == rowLength
	end
end

--Builds 'width' side of border.
function borderWidth()
	print ("Placing border side width.")
	if rowWidth % 2 == 0 then
		postCount = 0
	else
		postCount = 1
	end
	while postCount < rowWidth do
		repeat
			if turtle.getItemCount(borderMaterial) >= 1 then
				checkFuel()
				print ("Placing post: "..postCount)
				moveFwd()
				turtle.select(borderMaterial)
				turtle.placeDown()
				postCount = postCount + 1
			else
				print ("Error: Out of border supplies!")
				if wifi == true then
					rednet.broadcast("Error("..name.."): Out of border supplies!")
				end
				sleep(5)
			end
		until postCount == rowWidth
	end
end

--Builds border using Length and Width.
function buildBorder()
	print ("Building borders.")
	 for sideCount=1,2 do
	 	borderLength()
	 	turtle.turnLeft()
	 	borderWidth()
	 	turtle.turnLeft()
	 end
end

--Places ender chest to deposit items.
function depositLoot()
	print ("Depositing loot.")
	turtle.select(chest)
	if turtle.getItemCount(chest) == 1 then
		turtle.place()
		dropLoot()
		turtle.select(chest)
		turtle.dig()
	else
		print ("Error: Ender chest is missing.")
		if wifi == true then
			rednet.broadcast("Error("..name.."): Ender chest is missing.")
		end
		sleep(5)
	end
end

--Places all items from slot 1-13 into ender chest.
function dropLoot()
	print ("Droping loot in chest.")
	local dropItem = 1
	repeat
		turtle.select(dropItem)
		turtle.drop()
		dropItem = dropItem + 1
	until dropItem > 12
end

--Moves down non-tree row picking up items. If a tree some how magically is there, will cut it down.
function processFillRow()
	print ("Processing fill row.")
	local lengthCount = rowLength - 3
	while lengthCount > 1 do
		repeat
			pickUp()
			if turtle.compare(turtle.select(fuelSlot)) == true then
				moveFwd()
				lengthCount = lengthCount - 1
				removeTree()
			else
				moveFwd()
				lengthCount = lengthCount - 1
			end
		until lengthCount == 0
	end
end

--Moves down tree row. Checks for trees, picks up items.
function processTreeRow()
	print ("Processing tree row.")
	local lengthCount = rowLength - 3
	while lengthCount > 1 do
		repeat
			for i = 1,spacing do
				pickUp()
				if turtle.compare(turtle.select(fuelSlot)) == true then
					moveFwd()
					lengthCount = lengthCount - 1
					removeTree()
				else
					moveFwd()
					lengthCount = lengthCount - 1
				end
			end
			pickUp()
			if turtle.compare(turtle.select(fuelSlot)) == true then
				moveFwd()
				lengthCount = lengthCount - 1
				removeTree()
			else
				plant()
				moveFwd()
				lengthCount = lengthCount - 1
			end
		until lengthCount == 0
	end
end

--Returns begining point of processing.
function returnToStart()
	print ("Returning to starting position.")
	local toHome = rowWidth - 2
	turtle.back()
	turtle.turnRight()
	while toHome > 1 do
		repeat
			moveFwd()
			pickUp()
			toHome = toHome - 1
		until toHome == 0
	end
	turtle.turnLeft()
end

--Runs buildBorder then moves to begining point of processing.
function new()
	print ("Starting new farm.")
	buildBorder()
	turtle.turnLeft()
 	moveFwd()
 	turtle.turnRight()
 	moveFwd()
 	returnToStart()
 	processAll()
end

--Combines fill and tree row processes to process whole farm.
function processAll()
	print ("Processing farm.")
	local widthCount = rowWidth - 3
	local spaceCount = tonumber(0)
	while widthCount > 1 do
		repeat
			if spaceCount ~= treeSpacing then
				repeat
					processFillRow()
					spaceCount = spaceCount + 1
					if spaceCount % 2 == 0 then
						turtle.turnLeft()
						moveFwd()
						widthCount = widthCount - 1
						turtle.turnLeft()
					else
						turtle.turnRight()
						moveFwd()
						widthCount = widthCount - 1
						turtle.turnRight()
					end
				until spaceCount == treeSpacing			
			else
				if treeSpacing % 2 == 1 then
					turtle.turnRight()
					moveFwd()
					widthCount = widthCount - 1
					turtle.turnRight()
				else
					turtle.turnLeft()
					moveFwd()
					widthCount = widthCount - 1
					turtle.turnLeft()
				end
					processTreeRow()
					spaceCount = 0
			end
		until widthCount == 0
	end
end

--Main
openModem()
if string.match(isNew, "yes") then
	print ("You said yes.")
	if wifi == true then
		rednet.broadcast(name..": Starting new tree farm.")
	end
	turtle.up()
	sleep(5)
	new()
else
	repeat
		print ("You said no.")
		if wifi == true then
			rednet.broadcast(name..": Starting processing of existing farm.")
		end
		turtle.turnLeft()
	 	moveFwd()
	 	turtle.turnRight()
		moveFwd()
		processAll()
		returnToStart()
		sleep(300)
	until true == false
end